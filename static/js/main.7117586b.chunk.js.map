{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/todolistsList/todolists-reducer.ts","features/todolistsList/tasks-reducer.ts","components/AddItemForm/AdditemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/Todolist/Task/Task.tsx","features/todolistsList/Todolist/Todolist.tsx","features/todolistsList/TodolistsList.tsx","components/errorSnackbar/ErrorSnackBar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","count","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","setError","addItem","itemTitle","trim","TextField","value","label","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Checkbox","checked","newIsDoneValue","changeTaskStatus","Completed","New","removeTask","Delete","Todolist","useDispatch","useEffect","setTasksAC","items","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","entityStatus","map","style","paddingTop","Button","variant","TodolistsList","todolists","useSelector","state","thunk","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTodolistTitle","addTodolist","todolist","addTodolistAC","createTodolistTC","Grid","container","padding","spacing","tl","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7117586b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n        baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n        withCredentials: true,\n        headers: {\n            'API-KEY': '8c49b133-928a-4a57-b997-bbf0ea6abb17'\n        }\n    }\n)\n\n//api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    createTodolist(title: string) {\n        return instance.post<CommonResponseType<{ item: TodolistType }>>('todo-lists', {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\n    },\n    updateTodolistTitle(todolistId: string, title: string) {\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n}\n\n\n//types\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type CommonResponseType<D = {}> = {\n    data: D\n    messages: Array<string>\n    fieldsErrors: []\n    resultCode: number\n}\n\nexport enum TaskStatuses {\n    New,\n    InProgress,\n    Completed,\n    Draft\n}\n\nexport enum TaskPriorities {\n    Low,\n    Middle,\n    Hi,\n    Urgently,\n    Later\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null,\n    totalCount: number,\n    items: TaskType[]\n}\nexport type UpdateTaskModelType = {\n    title: string;\n    description: string;\n    status: number;\n    priority: number;\n    startDate: string;\n    deadline: string;\n}\n\n\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'loading' as RequestStatusType,\n    error: null as string | null\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error} as const)\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\ntype ActionsType =\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAppErrorAC>","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\nimport {Dispatch} from 'redux';\nimport {CommonResponseType} from \"../api/todolists-api\";\n\n// generic function\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\n\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {\n    RequestStatusType,\n    SetAppErrorActionType,\n    setAppStatusAC,\n    SetAppStatusActionType\n} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id !== action.id)\n        }\n        case 'ADD-TODOLIST': {\n            debugger;\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        }\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'SET-TODOLISTS':\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\n        default:\n            return state;\n    }\n}\n//action creators\nexport const removeTodolistAC = (id: string) =>\n    ({type: 'REMOVE-TODOLIST', id} as const)\nexport const addTodolistAC = (todolist: TodolistType) =>\n    ({type: 'ADD-TODOLIST', todolist} as const)\nexport const changeTodolistTitleAC = (id: string, title: string) =>\n    ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const)\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\n    ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const)\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\n    id,\n    entityStatus\n} as const)\n\n\n//thunks\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTodolists()\n        .then((res) => {\n            dispatch(setTodolistsAC(res.data))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n    todolistsAPI.deleteTodolist(todolistId)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(removeTodolistAC(todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.createTodolist(title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const todolist = res.data.data.item\n                dispatch(addTodolistAC(todolist))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTodolistTitle = (todolistId: string, title: string) => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.updateTodolistTitle(todolistId, title)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(changeTodolistTitleAC(todolistId, title))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n//types\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\ntype ActionsType =\n    | ReturnType<typeof removeTodolistAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | ReturnType<typeof setTodolistsAC>\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nconst initialState: Array<TodolistDomainType> = []\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n\ntype ThunkActionType =\n    | ActionsType\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n","import {TasksStateType} from '../../app/App';\nimport {\n    addTodolistAC,\n    removeTodolistAC, setTodolistsAC,\n} from './todolists-reducer';\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\n\nconst initialState: TasksStateType = {\n    count: []\n}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state};\n            delete copyState[action.id];\n            return copyState;\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState;\n        }\n        case 'SET-TASKS': {\n            return {...state, [action.todolistId]: action.tasks}\n        }\n        default:\n            return state;\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTasks(todolistId)\n        .then(res => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(setTasksAC(res.data.items, todolistId))\n        })\n}\nexport const removeTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.deleteTask(todolistId, id)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                const action = removeTaskAC(id, todolistId);\n                dispatch(action);\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => handleServerNetworkError(error, dispatch))\n}\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ThunkActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                dispatch(addTaskAC(task))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => handleServerNetworkError(error, dispatch))\n}\n\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch<ThunkActionType>, getState: () => AppRootStateType) => {\n\n    dispatch(setAppStatusAC('loading'))\n    const allTasksFromState = getState().tasks;\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\n    const task = tasksForCurrentTodolist.find(t => {\n        return t.id === taskId\n    })\n\n    if (task) {\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n        todolistsAPI.updateTask(todolistId, taskId, apiModel).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                const action = updateTaskAC(taskId, domainModel, todolistId)\n                dispatch(action)\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n            .catch((error) => handleServerNetworkError(error, dispatch))\n    }\n\n}\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof removeTodolistAC>\n    | ReturnType<typeof setTodolistsAC>\n    | ReturnType<typeof setTasksAC>\n\n\ntype ThunkActionType =\n    | ActionsType\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n\n\n\n","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const addItem = () => {\n        const itemTitle = newTaskTitle.trim()\n        if (itemTitle) {\n            props.addItem(itemTitle)\n        } else {\n            setError(\"Title is required!!!\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        setNewTaskTitle(e.currentTarget.value)\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem();\n    }\n    return (\n        <div>\n            <TextField value={newTaskTitle}\n                       label={'type value'}\n                       onChange={onNewTitleChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       helperText={error}\n                       disabled={props.disabled}\n            />\n            <IconButton onClick={addItem} color={'primary'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})\n// a4f2a95a-2f27-43ae-ad15-e63a35ca7922","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\nexport type EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\nexport type TaskPropsType = {\n    changeTaskStatus: (id: string, isDone: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    task: TaskType\n    todolistId: string\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props]);\n\n\n    return <div key={props.task.id} className={props.task.status ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === 2}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AdditemForm'\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [dispatch, props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [ props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeTodolistFilterAC, createTodolistTC,\n    fetchTodolistsTC,\n    FilterValuesType, removeTodolistTC,\n    TodolistDomainType, updateTodolistTitle\n} from \"./todolists-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\nimport {TaskStatuses} from \"../../api/todolists-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AdditemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {TasksStateType} from \"../../app/App\";\n\nexport const TodolistsList = () => {\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [dispatch])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        dispatch(removeTaskTC(todolistId, id))\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        dispatch(addTaskTC(todolistId, title))\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        dispatch(updateTaskTC(id, todolistId, {status}))\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback(function (id: string, title: string, todolistId: string) {\n        dispatch(updateTaskTC(id, todolistId, {title}))\n    }, [dispatch]);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value);\n        dispatch(action);\n    }, [dispatch]);\n\n    const removeTodolist = useCallback(function (todolistId: string) {\n        dispatch(removeTodolistTC(todolistId))\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\n        dispatch(updateTodolistTitle(id, title))\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(createTodolistTC(title))\n    }, [dispatch]);\n\n    return <>\n        <Grid container style={{padding: \"20px\"}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id];\n                    let tasksForTodolist = allTodolistTasks;\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                id={tl.id}\n                                title={tl.title}\n                                tasks={tasksForTodolist}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                filter={tl.filter}\n                                entityStatus={tl.entityStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const dispatch = useDispatch()\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container,  IconButton, Toolbar, Typography, LinearProgress} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nimport { useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {TaskType,} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/todolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/errorSnackbar/ErrorSnackBar\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType,string>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                { status === 'loading' && <LinearProgress/> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/todolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/todolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}