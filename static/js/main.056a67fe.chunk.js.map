{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/todolistsList/todolists-reducer.ts","features/todolistsList/tasks-reducer.ts","components/AddItemForm/AdditemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolistsList/Todolist/Task/Task.tsx","features/todolistsList/Todolist/Todolist.tsx","features/todolistsList/TodolistsList.tsx","components/errorSnackbar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","email","password","rememberMe","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","todolistsReducer","count","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","setError","addItem","itemTitle","trim","TextField","label","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","className","Checkbox","checked","newIsDoneValue","changeTaskStatus","Completed","New","removeTask","Delete","Todolist","useDispatch","useEffect","items","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","variant","TodolistsList","demo","useSelector","auth","thunk","removeTaskTC","item","addTaskTC","changeStatus","removeTodolistTC","updateTodolistTitleTC","addTodolist","createTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.056a67fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n        baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n        withCredentials: true,\n        headers: {\n            'API-KEY': '8c49b133-928a-4a57-b997-bbf0ea6abb17'\n        }\n    }\n)\n\n//api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    createTodolist(title: string) {\n        return instance.post<CommonResponseType<{ item: TodolistType }>>('todo-lists', {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\n    },\n    updateTodolistTitle(todolistId: string, title: string) {\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n}\n\nexport const authAPI = {\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post<CommonResponseType<{userId: number}>>('/auth/login', {email, password, rememberMe})\n    },\n    me() {\n        return instance.get<CommonResponseType>('/auth/me')\n    },\n    logout() {\n        return instance.delete<CommonResponseType>('/auth/login')\n    }\n}\n\n\n\n\n\n\n\n//types\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type CommonResponseType<D = {}> = {\n    data: D\n    messages: Array<string>\n    resultCode: number\n}\n\nexport enum TaskStatuses {\n    New,\n    InProgress,\n    Completed,\n    Draft\n}\n\nexport enum TaskPriorities {\n    Low,\n    Middle,\n    Hi,\n    Urgently,\n    Later\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null,\n    totalCount: number,\n    items: TaskType[]\n}\nexport type UpdateTaskModelType = {\n    title: string;\n    description: string;\n    status: number;\n    priority: number;\n    startDate: string;\n    deadline: string;\n}\n\n\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\nimport {Dispatch} from 'redux';\nimport {CommonResponseType} from \"../api/todolists-api\";\n\n// generic function\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\n    }\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC({error: error.message ? error.message : \"Some error occurred\"}))\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\n\n","import {Dispatch} from 'redux'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            state.isLoggedIn = action.payload.value\n        }\n    }\n})\n\nexport const authReducer = slice.reducer\n\nexport const {setIsLoggedInAC} = slice.actions\n// actions\n// thunks\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.login(email, password, rememberMe)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => handleServerNetworkError(error, dispatch))\n}\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: false}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n// types\n","import {setIsLoggedInAC} from \"../features/Login/authReducer\";\nimport {authAPI} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'loading' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n}\n\nconst slice = createSlice({\n    name: 'app',\n    initialState: initialState,\n    reducers: {\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        },\n        setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {\n            state.error = action.payload.error\n        },\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\n            state.isInitialized = action.payload.isInitialized\n        }\n    }\n})\n\n\nexport const appReducer = slice.reducer\n\nexport const {setAppStatusAC} = slice.actions\nexport const {setAppErrorAC} = slice.actions\nexport const {setIsInitializedAC} = slice.actions\n\n\n//thunks\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}));\n        } else {\n        }\n    })\n        .finally(() => {\n            dispatch(setIsInitializedAC({isInitialized: true}))\n        })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {\n    RequestStatusType,\n    setAppStatusAC,\n} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: Array<TodolistDomainType> = []\n\nconst slice = createSlice({\n    name: \"todolists-reducer\",\n    initialState: initialState,\n    reducers: {\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        },\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].title = action.payload.title\n        },\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].filter = action.payload.filter\n\n        },\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].entityStatus = action.payload.entityStatus\n        }\n    }\n})\n\nexport const todolistsReducer = slice.reducer\n\n//action creators\nexport const {removeTodolistAC} = slice.actions\nexport const {addTodolistAC} = slice.actions\nexport const {changeTodolistTitleAC} = slice.actions\nexport const {changeTodolistFilterAC} = slice.actions\nexport const {setTodolistsAC} = slice.actions\nexport const {changeTodolistEntityStatusAC} = slice.actions\n\n\n//thunks\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.getTodolists()\n        .then((res) => {\n            dispatch(setTodolistsAC({todolists: res.data}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\n    todolistsAPI.deleteTodolist(todolistId)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n                dispatch(removeTodolistAC({id: todolistId}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.createTodolist(title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const todolist = res.data.data.item\n                dispatch(addTodolistAC({todolist: todolist}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.updateTodolistTitle(todolistId, title)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n                dispatch(changeTodolistTitleAC({id: todolistId, title}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n//types\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n","import {TasksStateType} from '../../app/App';\nimport {\n    addTodolistAC,\n    removeTodolistAC, setTodolistsAC,\n} from './todolists-reducer';\nimport {\n    TaskPriorities,\n    TaskStatuses,\n    TaskType,\n    todolistsAPI,\n    UpdateTaskModelType\n} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: TasksStateType = {\n    count: []\n}\n\nconst slice = createSlice({\n    name: \"tasks-reducer\",\n    initialState: initialState,\n    reducers: {\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        },\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n            state[action.payload.task.todoListId].unshift(action.payload.task)\n        },\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        },\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\n            state[action.payload.todolistId] = action.payload.tasks\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = []\n        });\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.id]\n        });\n        builder.addCase(setTodolistsAC, (state, action) => {\n            action.payload.todolists.forEach((tl) => {\n                state[tl.id] = []\n            })\n        });\n    }\n})\n\nexport const tasksReducer = slice.reducer\n\n\n//action creators\n\nexport const {removeTaskAC} = slice.actions\nexport const {addTaskAC} = slice.actions\nexport const {updateTaskAC} = slice.actions\nexport const {setTasksAC} = slice.actions\n//thunks\n\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.getTasks(todolistId)\n        .then(res => {\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n            dispatch(setTasksAC({tasks: res.data.items, todolistId: todolistId}))\n        })\n}\nexport const removeTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.deleteTask(todolistId, id)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n                const action = removeTaskAC({taskId: id, todolistId: todolistId});\n                dispatch(action);\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => handleServerNetworkError(error, dispatch))\n}\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                dispatch(addTaskAC({task: task}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => handleServerNetworkError(error, dispatch))\n}\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n\n    dispatch(setAppStatusAC({status: 'loading'}))\n    const allTasksFromState = getState().tasks;\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\n    const task = tasksForCurrentTodolist.find(t => {\n        return t.id === taskId\n    })\n\n    if (task) {\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n        todolistsAPI.updateTask(todolistId, taskId, apiModel).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n                const action = updateTaskAC({taskId, model: domainModel, todolistId})\n                dispatch(action)\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n            .catch((error) => handleServerNetworkError(error, dispatch))\n    }\n\n}\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\n\n\n\n","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const addItem = () => {\n        const itemTitle = newTaskTitle.trim()\n        if (itemTitle) {\n            props.addItem(itemTitle)\n        } else {\n            setError(\"Title is required!!!\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        setNewTaskTitle(e.currentTarget.value)\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem();\n    }\n    return (\n        <div>\n            <TextField value={newTaskTitle}\n                       label={'type value'}\n                       onChange={onNewTitleChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       helperText={error}\n                       disabled={props.disabled}\n            />\n            <IconButton onClick={addItem} color={'primary'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})\n// a4f2a95a-2f27-43ae-ad15-e63a35ca7922","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\nexport type EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/editableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\nexport type TaskPropsType = {\n    changeTaskStatus: (id: string, isDone: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    task: TaskType\n    todolistId: string\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props]);\n\n\n    return <div key={props.task.id} className={props.task.status ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === 2}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AdditemForm'\r\nimport {EditableSpan} from '../../../components/editableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [props.id, dispatch])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeTodolistFilterAC, createTodolistTC,\n    fetchTodolistsTC,\n    FilterValuesType, removeTodolistTC,\n    TodolistDomainType, updateTodolistTitleTC\n} from \"./todolists-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\nimport {TaskStatuses} from \"../../api/todolists-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AdditemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {TasksStateType} from \"../../app/App\";\nimport {Redirect} from \"react-router-dom\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList = React.memo(({demo = false}: PropsType) => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [isLoggedIn, dispatch, demo])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        dispatch(removeTaskTC(todolistId, id))\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        dispatch(addTaskTC(todolistId, title))\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        dispatch(updateTaskTC(id, todolistId, {status}))\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback(function (id: string, title: string, todolistId: string) {\n        dispatch(updateTaskTC(id, todolistId, {title}))\n    }, [dispatch]);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC({id:todolistId,filter: value});\n        dispatch(action);\n    }, [dispatch]);\n\n    const removeTodolist = useCallback(function (todolistId: string) {\n        dispatch(removeTodolistTC(todolistId))\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\n        dispatch(updateTodolistTitleTC(id, title))\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(createTodolistTC(title))\n    }, [dispatch]);\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'}/>\n    }\n    return <>\n        <Grid container style={{padding: \"20px\"}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id];\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                id={tl.id}\n                                title={tl.title}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                filter={tl.filter}\n                                entityStatus={tl.entityStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n)","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const dispatch = useDispatch()\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC({error: null}))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./authReducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password.length) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Пароль должен быть больше 3 символов';\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(loginTC(values.email, values.password, values.rememberMe))\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'} rel=\"noopener noreferrer\">here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email && formik.errors.email ?\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password ?\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                            />}\n\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n    LinearProgress,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {TaskType,} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/todolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/errorSnackbar/ErrorSnackBar\";\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler}>logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/todolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/todolistsList/todolists-reducer';\nimport {combineReducers} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/authReducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\n})\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store'\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}