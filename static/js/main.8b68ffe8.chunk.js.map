{"version":3,"sources":["AdditemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","itemTitle","trim","TextField","value","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","changeTaskTitle","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodoList","Delete","addTask","tasks","map","t","className","isDone","Checkbox","changeStatus","checked","removeTask","Button","variant","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","taskID","todolistID","task","find","todoList","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","todoListTitle","todoListId","newTodoList","spacing","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8b68ffe8.chunk.js","sourcesContent":["import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n\n}\n\nexport const AddItemForm = (props: AddItemFormPropsType) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const addItem = () => {\n        const itemTitle = newTaskTitle.trim()\n        if (itemTitle) {\n            props.addItem(itemTitle)\n        } else {\n            setError(\"Title is required!!!\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setNewTaskTitle(e.currentTarget.value)\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem();\n    }\n    return (\n        <div>\n            <TextField value={newTaskTitle}\n                       label={'type value'}\n                       onChange={onNewTitleChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       helperText={error}\n            />\n            <IconButton onClick={addItem} color={'primary'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n}","import React, {useState, ChangeEvent} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTaskTitle: (title: string) => void\n}\n\nfunction EditableSpan(props: EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        if (title.trim()) {\n            props.changeTaskTitle(title.trim())\n        }\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode ? <TextField value={title}\n                          onBlur={offEditMode}\n                          autoFocus\n                          onChange={changeTitle}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}\n\nexport default EditableSpan","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Add, CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeStatus: (TaskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (TaskID: string, title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeAllHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const changeActiveHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const changeCompletedHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n    const onRemoveTodolistHandler = () => {\r\n        props.removeTodoList(props.id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton></h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTask(t.id, props.id)\r\n                        }\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                        }\r\n                        const changeTitle = (title: string) => {\r\n                            props.changeTaskTitle(t.id, title, props.id)\r\n                        }\r\n                        return <div key={t.id}\r\n                                   className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox onChange={onChangeHandler} checked={t.isDone}/>\r\n                            <EditableSpan title={t.title} changeTaskTitle={changeTitle}/>\r\n                            <IconButton onClick={onRemoveHandler}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} onClick={changeAllHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={changeActiveHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={changeCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n        ],\r\n        [todoListID2]: [{id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(newTaskTitle: string, todoListID: string) {\r\n        let newTask: TaskType = {\r\n            id: v1(),\r\n            title: newTaskTitle,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, todolistID: string) {\r\n        const todoListTasks = tasks[todolistID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todolistID: string) {\r\n        const todoListTasks = tasks[todolistID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(todoListTitle: string) {\r\n        const todoListId = v1();\r\n        const newTodoList: TodoListType = {\r\n            id: todoListId,\r\n            title: todoListTitle,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let tasksForTodoList = tasks[tl.id]\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper style={ {padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasksForTodoList}\r\n                                        removeTodoList={removeTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}