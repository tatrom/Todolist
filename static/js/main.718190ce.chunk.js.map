{"version":3,"sources":["serviceWorker.ts","AdditemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","state/todolists-reducer.ts","Todolist.tsx","AppWithRedux.tsx","state/Store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","itemTitle","trim","TextField","value","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","changeTaskTitle","autoFocus","onDoubleClick","initialState","ChangeFilterAC","todoListID","type","Todolist","tasks","useSelector","state","id","dispatch","useDispatch","tasksForTodoList","filter","t","isDone","changeTodolistTitle","removeTodoList","Delete","todolistID","AddTaskAC","map","className","Checkbox","todolistId","checked","ChangeTaskTitleAC","taskID","Button","variant","App","todolists","store","ChangeTodolistTitleAC","changeFilter","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","todoListTitle","v1","spacing","tl","item","Paper","rootReducer","combineReducers","action","stateCopy","todolistTasks","newTask","todoListsTasks","copyState","todolist","find","newTodolist","createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.718190ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n\n}\n\nexport const AddItemForm = (props: AddItemFormPropsType) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const addItem = () => {\n        const itemTitle = newTaskTitle.trim()\n        if (itemTitle) {\n            props.addItem(itemTitle)\n        } else {\n            setError(\"Title is required!!!\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setNewTaskTitle(e.currentTarget.value)\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem();\n    }\n    return (\n        <div>\n            <TextField value={newTaskTitle}\n                       label={'type value'}\n                       onChange={onNewTitleChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       helperText={error}\n            />\n            <IconButton onClick={addItem} color={'primary'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n}","import React, {useState, ChangeEvent} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTaskTitle: (title: string) => void\n}\n\nfunction EditableSpan(props: EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        if (title.trim()) {\n            props.changeTaskTitle(title.trim())\n        }\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode ? <TextField value={title}\n                          onBlur={offEditMode}\n                          autoFocus\n                          onChange={changeTitle}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}\n\nexport default EditableSpan","import {TaskStateType} from \"../Todolist\";\nimport {v1} from \"uuid\";\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\n\nconst CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\nconst CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\n\ntype RemoveTaskAction = {\n    type: 'REMOVE-TASK'\n    taskID: string\n    todolistID: string\n}\n\ntype AddTaskAction = {\n    type: \"ADD-TASK\"\n    title: string\n    todolistID: string\n}\n\nexport type ChangeTaskStatusCreator = {\n    type: 'CHANGE-TASK-STATUS'\n    todolistId: string\n    isDone: boolean\n    id: string\n}\n\nexport type ChangeTaskTitleCreator = {\n    type: 'CHANGE-TASK-TITLE'\n    id: string\n    title: string\n    todolistId: string\n}\n\n\ntype ActionType =\n    RemoveTaskAction\n    | AddTaskAction\n    | ChangeTaskStatusCreator\n    | ChangeTaskTitleCreator\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nlet initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            let todolistTasks = stateCopy[action.todolistID]\n            stateCopy[action.todolistID] = todolistTasks.filter(t => t.id !== action.taskID)\n            return stateCopy\n        }\n        case \"ADD-TASK\": {\n            let stateCopy = {...state}\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            let todoListsTasks = state[action.todolistID]\n            stateCopy[action.todolistID] = [...todoListsTasks, newTask]\n            return stateCopy\n        }\n        case CHANGE_TASK_STATUS: {\n            let stateCopy = {...state}\n            let tasks = state[action.todolistId];\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.id ? {...t, isDone: action.isDone} : t)\n            return stateCopy\n        }\n        case CHANGE_TASK_TITLE: {\n            let stateCopy = {...state}\n            let tasks = stateCopy[action.todolistId]\n            stateCopy[action.todolistId] = tasks.map( t => t.id === action.id ? {...t, title: action.title} : t)\n            return stateCopy\n        }\n        case 'ADD-TODOLIST-TYPE': {\n            let stateCopy = {...state}\n            stateCopy[action.id] = []\n            return stateCopy\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.todolistID]\n            return copyState;\n        }\n        default:\n            return state\n    }\n}\n\nexport const RemoveTaskAC = (taskID: string, todolistID: string): RemoveTaskAction => {\n    return {type: \"REMOVE-TASK\", taskID, todolistID}\n}\n\nexport const AddTaskAC = (title: string, todolistID: string): AddTaskAction => {\n    return {type: \"ADD-TASK\", title, todolistID}\n}\n\nexport const ChangeTaskStatusAC = (id: string, todolistId: string, isDone: boolean): ChangeTaskStatusCreator => {\n    return {type: CHANGE_TASK_STATUS, id: id, todolistId: todolistId, isDone: isDone}\n}\n\nexport const ChangeTaskTitleAC = (id: string, title: string, todolistId: string): ChangeTaskTitleCreator => {\n    return {type: CHANGE_TASK_TITLE, id: id, title: title, todolistId: todolistId}\n}","import {FilterValuesType, TodoListType} from \"../AppWithRedux\";\nimport {v1} from \"uuid\";\n\n\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: string\n    title: string\n}\nexport type ChangeFilterActionType = {\n    type: 'CHANGE-FILTER'\n    value: FilterValuesType\n    todoListID: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST-TYPE'\n    title: string\n    id: string\n}\nexport type RemoveTodolistActionType = {\n    type: \"REMOVE-TODOLIST\"\n    todolistID: string\n}\n\ntype ActionType =\n    ChangeTodolistTitleActionType\n    | ChangeFilterActionType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nlet initialState: Array<TodoListType> = []\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType) => {\n    switch (action.type) {\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            debugger\n            return [...state]\n        }\n        case 'CHANGE-FILTER': {\n            const todolist = state.find(tl => tl.id === action.todoListID);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                debugger\n                todolist.filter = action.value;\n            }\n            return [...state];\n        }\n        case 'ADD-TODOLIST-TYPE': {\n            const newTodolist: TodoListType = {\n                id: action.id,\n                title: action.title,\n                filter: \"all\"\n            }\n            return [...state, newTodolist]\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = state.filter(tl => tl.id !== action.todolistID);\n            return copyState\n        }\n        default:\n            return state\n    }\n}\n\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\n}\n\nexport const ChangeFilterAC = (value: FilterValuesType, todoListID: string): ChangeFilterActionType => {\n    return {type: 'CHANGE-FILTER', value, todoListID}\n}\n\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST-TYPE', title, id: v1()}\n}\n\nexport const RemoveTodolistAC = (todolistID: string): RemoveTodolistActionType => {\n    return {type: \"REMOVE-TODOLIST\", todolistID}\n}","import React, {ChangeEvent} from 'react';\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/Store\";\r\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC} from \"./state/tasks-reducer\";\r\nimport {ChangeFilterAC} from \"./state/todolists-reducer\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n    const dispatch = useDispatch();\r\n    const addTask = (title: string) => {\r\n        dispatch(AddTaskAC(title, props.id));\r\n    }\r\n    let tasksForTodoList = tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    const changeAllHandler = () => dispatch(ChangeFilterAC(\"all\", props.id))\r\n    const changeActiveHandler = () => dispatch(ChangeFilterAC(\"active\", props.id))\r\n    const changeCompletedHandler = () => dispatch(ChangeFilterAC(\"completed\", props.id))\r\n\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        debugger\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n    const onRemoveTodolistHandler = () => {\r\n        props.removeTodoList(props.id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton></h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForTodoList.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            dispatch(RemoveTaskAC(t.id, props.id))\r\n                        }\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            dispatch(ChangeTaskStatusAC(t.id, props.id, e.currentTarget.checked))\r\n                        }\r\n                        const changeTitle = (title: string) => {\r\n                            dispatch(ChangeTaskTitleAC(t.id, title, props.id))\r\n                        }\r\n                        return <div key={t.id}\r\n                                    className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox onChange={onChangeHandler} checked={t.isDone}/>\r\n                            <EditableSpan title={t.title} changeTaskTitle={changeTitle}/>\r\n                            <IconButton onClick={onRemoveHandler}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} onClick={changeAllHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={changeActiveHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={changeCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/Store\";\r\nimport {AddTodolistAC, ChangeFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC} from \"./state/todolists-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListType>>(store => store.todolists)\r\n    const dispatch = useDispatch()\r\n\r\n    function changeTodolistTitle(title: string, todoListID: string) {\r\n        debugger\r\n        dispatch(ChangeTodolistTitleAC(todoListID, title))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        dispatch(ChangeFilterAC(value, todoListID))\r\n\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        dispatch(RemoveTodolistAC(todoListID))\r\n    }\r\n\r\n    function addTodoList(todoListTitle: string) {\r\n        dispatch(AddTodolistAC(todoListTitle))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todoListsReducer} from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers( {\n    tasks: tasksReducer,\n    todolists:todoListsReducer\n})\nexport const store = createStore(rootReducer)\nexport type  AppRootStateType = ReturnType<typeof rootReducer>\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/Store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/> </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}