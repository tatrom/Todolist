{"version":3,"sources":["AdditemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","itemTitle","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","changeTaskTitle","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","id","addTask","tasks","map","t","isDone","type","changeStatus","checked","removeTask","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","taskID","todolistID","task","find","todoList","tl","removeTodoList","todoListTitle","todoListId","newTodoList","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e80ecd1d.chunk.js","sourcesContent":["import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n\n}\n\nexport const AddItemForm = (props:AddItemFormPropsType) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const addItem = () => {\n        const itemTitle = newTaskTitle.trim()\n        if (itemTitle) {\n            props.addItem(itemTitle)\n        } else {\n            setError(\"Title is required!!!\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        setNewTaskTitle(e.currentTarget.value)\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem();\n    }\n    return (\n        <div>\n            <input value={newTaskTitle}\n                   onChange={onNewTitleChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   className={error ? \"error \" : \"\"}/>\n            <button onClick={addItem}>+</button>\n            {error && <div className={\"error-message\"}>{error}</div>}\n        </div>\n    )\n}","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTaskTitle: (title: string) => void\n}\n\nfunction EditableSpan(props: EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        if(title.trim()) {props.changeTaskTitle(title.trim())}\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode ? <input value={title}\n                          onBlur={offEditMode}\n                          autoFocus\n                          onChange={changeTitle}\n\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}\n\nexport default EditableSpan","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeStatus: (TaskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (TaskID: string, title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeAllHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const changeActiveHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const changeCompletedHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle} /></h3>\r\n\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul>\r\n                    {\r\n                        props.tasks.map(t => {\r\n                            const onRemoveHandler = () => {\r\n                                props.removeTask(t.id, props.id)\r\n                            }\r\n                            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                            }\r\n                            const changeTitle = (title: string) => {\r\n                                props.changeTaskTitle(t.id, title, props.id)\r\n                            }\r\n                            return <li key={t.id}\r\n                                       className={t.isDone ? \"is-done\" : \"\"}>\r\n                                <input type=\"checkbox\"\r\n                                       onChange={onChangeHandler}\r\n                                       checked={t.isDone}/>\r\n                                <EditableSpan title={t.title} changeTaskTitle={changeTitle}/>\r\n                                <button onClick={onRemoveHandler}>x</button>\r\n                            </li>\r\n                        })\r\n                    }\r\n                </ul>\r\n                <div>\r\n                    <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={changeAllHandler}>All\r\n                    </button>\r\n                    <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                            onClick={changeActiveHandler}>Active\r\n                    </button>\r\n                    <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                            onClick={changeCompletedHandler}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AdditemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n        ],\r\n        [todoListID2]: [{id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(newTaskTitle: string, todoListID: string) {\r\n        let newTask: TaskType = {\r\n            id: v1(),\r\n            title: newTaskTitle,\r\n            isDone: false\r\n        }\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, todolistID: string) {\r\n        const todoListTasks = tasks[todolistID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todolistID: string) {\r\n        const todoListTasks = tasks[todolistID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function changeTodolistTitle(title:string, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(todoListTitle: string) {\r\n        const todoListId = v1();\r\n        const newTodoList: TodoListType = {\r\n            id: todoListId,\r\n            title: todoListTitle,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {\r\n                todoLists.map(tl => {\r\n                    let tasksForTodoList = tasks[tl.id]\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n                    }\r\n                    return (<Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={tasksForTodoList}\r\n                            removeTodoList={removeTodoList}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}