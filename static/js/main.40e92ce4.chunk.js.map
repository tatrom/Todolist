{"version":3,"sources":["serviceWorker.ts","AdditemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","state/todolists-reducer.ts","state/Task.tsx","Todolist.tsx","AppWithRedux.tsx","state/Store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","console","log","addItem","itemTitle","trim","TextField","value","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","changeTaskTitle","autoFocus","onDoubleClick","initialState","ChangeFilterAC","todoListID","type","Task","changeTitle","useCallback","task","id","className","isDone","Checkbox","isChecked","checked","onChangeHandler","taskId","onRemoveHandler","Delete","Todolist","tasks","useSelector","state","dispatch","useDispatch","addTask","todolistID","AddTaskAC","tasksForTodoList","filter","t","changeAllHandler","changeActiveHandler","changeCompletedHandler","changeTodoListTitle","changeTodolistTitle","onRemoveTodolistHandler","removeTodoList","taskID","todolistId","ChangeTaskTitleAC","map","Button","variant","App","todolists","store","ChangeTodolistTitleAC","changeFilter","addTodoList","todoListTitle","v1","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","action","stateCopy","todolistTasks","newTask","todoListsTasks","copyState","todolist","find","newTodolist","createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.40e92ce4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    console.log('Add item form')\n    const addItem = () => {\n        const itemTitle = newTaskTitle.trim()\n        if (itemTitle) {\n            props.addItem(itemTitle)\n        } else {\n            setError(\"Title is required!!!\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        setNewTaskTitle(e.currentTarget.value)\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem();\n    }\n    return (\n        <div>\n            <TextField value={newTaskTitle}\n                       label={'type value'}\n                       onChange={onNewTitleChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       helperText={error}\n            />\n            <IconButton onClick={addItem} color={'primary'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import React, {useState, ChangeEvent} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTaskTitle: (title: string) => void\n    taskId?: string\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n        const [editMode, setEditMode] = useState<boolean>(false)\n        const [title, setTitle] = useState<string>(props.title)\n        const onEditMode = () => setEditMode(true)\n        const offEditMode = () => {\n            setEditMode(false)\n            if (title.trim()) {\n                props.changeTaskTitle(title.trim())\n            }\n        }\n        const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n            setTitle(e.currentTarget.value)\n        }\n\n        return (\n            editMode ? <TextField value={title}\n                                  onBlur={offEditMode}\n                                  autoFocus\n                                  onChange={changeTitle}\n                />\n                : <span onDoubleClick={onEditMode}>{props.title}</span>\n        )\n    }\n)\nexport default EditableSpan","import {TaskStateType} from \"../Todolist\";\nimport {v1} from \"uuid\";\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\n\nconst CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\nconst CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\n\ntype RemoveTaskAction = {\n    type: 'REMOVE-TASK'\n    taskID: string\n    todolistID: string\n}\n\ntype AddTaskAction = {\n    type: \"ADD-TASK\"\n    title: string\n    todolistID: string\n}\n\nexport type ChangeTaskStatusCreator = {\n    type: 'CHANGE-TASK-STATUS'\n    todolistId: string\n    isDone: boolean\n    id: string\n}\n\nexport type ChangeTaskTitleCreator = {\n    type: 'CHANGE-TASK-TITLE'\n    id: string\n    title: string\n    todolistId: string\n}\n\n\ntype ActionType =\n    RemoveTaskAction\n    | AddTaskAction\n    | ChangeTaskStatusCreator\n    | ChangeTaskTitleCreator\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nlet initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            let todolistTasks = stateCopy[action.todolistID]\n            stateCopy[action.todolistID] = todolistTasks.filter(t => t.id !== action.taskID)\n            return stateCopy\n        }\n        case \"ADD-TASK\": {\n            let stateCopy = {...state}\n            const newTask = {id: v1(), title: action.title, isDone: false}\n            let todoListsTasks = state[action.todolistID]\n            stateCopy[action.todolistID] = [...todoListsTasks, newTask]\n            return stateCopy\n        }\n        case CHANGE_TASK_STATUS: {\n            let todolistTasks = state[action.todolistId];\n            state[action.todolistId] = todolistTasks.map(t => t.id === action.id ? {...t, isDone: action.isDone} : t)\n            return ({...state})\n        }\n        case CHANGE_TASK_TITLE: {\n            let todolistTasks = state[action.todolistId]\n            state[action.todolistId] = todolistTasks.map(t => t.id === action.id ? {...t, title: action.title} : t)\n            return ({...state})\n        }\n        case 'ADD-TODOLIST-TYPE': {\n            let stateCopy = {...state}\n            stateCopy[action.id] = []\n            return stateCopy\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.todolistID]\n            return copyState;\n        }\n        default:\n            return state\n    }\n}\n\nexport const RemoveTaskAC = (taskID: string, todolistID: string): RemoveTaskAction => {\n    return {type: \"REMOVE-TASK\", taskID, todolistID}\n}\n\nexport const AddTaskAC = (title: string, todolistID: string): AddTaskAction => {\n    return {type: \"ADD-TASK\", title, todolistID}\n}\n\nexport const ChangeTaskStatusAC = (id: string, todolistId: string, isDone: boolean): ChangeTaskStatusCreator => {\n    return {type: CHANGE_TASK_STATUS, id: id, todolistId: todolistId, isDone: isDone}\n}\n\nexport const ChangeTaskTitleAC = (id: string, title: string, todolistId: string): ChangeTaskTitleCreator => {\n    return {type: CHANGE_TASK_TITLE, id: id, title: title, todolistId: todolistId}\n}","import {FilterValuesType, TodoListType} from \"../AppWithRedux\";\nimport {v1} from \"uuid\";\n\n\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: string\n    title: string\n}\nexport type ChangeFilterActionType = {\n    type: 'CHANGE-FILTER'\n    value: FilterValuesType\n    todoListID: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST-TYPE'\n    title: string\n    id: string\n}\nexport type RemoveTodolistActionType = {\n    type: \"REMOVE-TODOLIST\"\n    todolistID: string\n}\n\ntype ActionType =\n    ChangeTodolistTitleActionType\n    | ChangeFilterActionType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nlet initialState: Array<TodoListType> = []\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType) => {\n    switch (action.type) {\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-FILTER': {\n            const todolist = state.find(tl => tl.id === action.todoListID);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.filter = action.value;\n            }\n            return [...state];\n        }\n        case 'ADD-TODOLIST-TYPE': {\n            const newTodolist: TodoListType = {\n                id: action.id,\n                title: action.title,\n                filter: \"all\"\n            }\n            return [...state, newTodolist]\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = state.filter(tl => tl.id !== action.todolistID);\n            return copyState\n        }\n        default:\n            return state\n    }\n}\n\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\n}\n\nexport const ChangeFilterAC = (value: FilterValuesType, todoListID: string): ChangeFilterActionType => {\n    return {type: 'CHANGE-FILTER', value, todoListID}\n}\n\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST-TYPE', title, id: v1()}\n}\n\nexport const RemoveTodolistAC = (todolistID: string): RemoveTodolistActionType => {\n    return {type: \"REMOVE-TODOLIST\", todolistID}\n}","import React, {useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"../Todolist\";\n\ntype TaskPropsType = {\n    onRemoveHandler: (taskId: string) => void\n    onChangeHandler: (isChecked: boolean, taskId: string) => void\n    changeTitle: (title: string, taskId: string) => void\n    task: TaskType\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onRemoveHandler = () => {\n        props.onRemoveHandler(props.task.id)\n    }\n    const onChangeHandler = (isChecked: boolean) => {\n        props.onChangeHandler(isChecked, props.task.id)\n    }\n    const changeTitle = useCallback((title: string) => {\n        props.changeTitle(title, props.task.id)\n    }, [props.task.id, props.changeTitle])\n\n\n    return (\n        <div key={props.task.id}\n             className={props.task.isDone ? \"is-done\" : \"\"}>\n            <Checkbox onChange={e => onChangeHandler(e.currentTarget.checked)}\n                      checked={props.task.isDone}/>\n            <EditableSpan title={props.task.title} changeTaskTitle={changeTitle} taskId={props.task.id}/>\n            <IconButton onClick={() => props.onRemoveHandler(props.task.id)}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/Store\";\r\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC} from \"./state/tasks-reducer\";\r\nimport {ChangeFilterAC} from \"./state/todolists-reducer\";\r\nimport {Task} from \"./state/Task\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(AddTaskAC(title, props.id));\r\n    }, [dispatch, props.id])\r\n\r\n    let tasksForTodoList = tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    const changeAllHandler = useCallback(() => dispatch(ChangeFilterAC(\"all\", props.id)), [dispatch, props.id])\r\n    const changeActiveHandler = useCallback(() => dispatch(ChangeFilterAC(\"active\", props.id)), [dispatch, props.id])\r\n    const changeCompletedHandler = useCallback(() => dispatch(ChangeFilterAC(\"completed\", props.id)), [dispatch, props.id])\r\n\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }, [])\r\n    const onRemoveTodolistHandler = useCallback(() => {\r\n        props.removeTodoList(props.id)\r\n    }, []);\r\n    const onRemoveHandler = useCallback((taskId: string) => {\r\n        dispatch(RemoveTaskAC(taskId, props.id))\r\n    }, [])\r\n    const onChangeHandler = useCallback((isChecked: boolean, taskId: string) => {\r\n        dispatch(ChangeTaskStatusAC(taskId, props.id, isChecked))\r\n    }, [tasks])\r\n    const changeTitle = useCallback((title: string, taskId: string) => {\r\n        dispatch(ChangeTaskTitleAC(taskId, title, props.id))\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton></h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForTodoList.map(t => <Task changeTitle={changeTitle} onChangeHandler={onChangeHandler}\r\n                                                    onRemoveHandler={onRemoveHandler} task={t}/>\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} onClick={changeAllHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={changeActiveHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={changeCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AdditemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/Store\";\r\nimport {AddTodolistAC, ChangeFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC} from \"./state/todolists-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    console.log(\"I am an App\")\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListType>>(store => store.todolists)\r\n    const dispatch = useDispatch()\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(ChangeTodolistTitleAC(todoListID, title))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(ChangeFilterAC(value, todoListID))\r\n\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(RemoveTodolistAC(todoListID))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        dispatch(AddTodolistAC(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todoListsReducer} from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers( {\n    tasks: tasksReducer,\n    todolists:todoListsReducer\n})\nexport const store = createStore(rootReducer)\nexport type  AppRootStateType = ReturnType<typeof rootReducer>\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/Store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/> </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}